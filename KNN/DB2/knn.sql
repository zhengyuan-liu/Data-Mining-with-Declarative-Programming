CONNECT TO SAMPLE

CREATE OR REPLACE PROCEDURE drop_table_if_exists(IN TableName VARCHAR(50))
LANGUAGE SQL
BEGIN
	DECLARE STMT VARCHAR(200);
	IF EXISTS (SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME = TableName)
	THEN
		SET STMT = 'DROP TABLE ' || TableName;
		EXECUTE IMMEDIATE STMT;
	END IF;
END

CALL drop_table_if_exists('TRAIN')
CALL drop_table_if_exists('TEST')
CALL drop_table_if_exists('TRAIN_LABEL')
CALL drop_table_if_exists('TEST_LABEL')
CALL drop_table_if_exists('K')

CREATE TABLE TRAIN (
	PID INTEGER, 
	ColID INTEGER,
	ColValue DOUBLE
);

CREATE TABLE TEST (
	PID INTEGER, 
	ColID INTEGER,
	ColValue DOUBLE
);

CREATE TABLE TRAIN_LABEL (
	PID INTEGER, 
	PLabel INTEGER
);

CREATE TABLE TEST_LABEL (
	PID INTEGER, 
	PLabel INTEGER
);

CREATE TABLE K (K INTEGER);

### toy data begins

INSERT INTO TRAIN VALUES
	(1,1,1317.265789),
	(1,2,1315.220951),
	(1,3,1312.770581),
	(1,4,1309.834252),
	(2,1,7329.967624),
	(2,2,7379.907443),
	(2,3,7441.799231),
	(2,4,7518.503422),
	(3,1,809.4214096),
	(3,2,809.7801194),
	(3,3,810.2071911),
	(3,4,810.7156529);

INSERT INTO TEST VALUES
	(1,1,1041.990593),
	(1,2,1039.850024),
	(1,3,1037.136237),
	(1,4,1033.695733),
	(2,1,1041.990593),
	(2,2,1039.850024),
	(2,3,1037.136237),
	(2,4,1033.695733);

INSERT INTO TRAIN_LABEL VALUES
	(1,0),
	(2,1),
	(3,1);

INSERT INTO TEST_LABEL VALUES
	(1,1),
	(2,0);

INSERT INTO K VALUES (3);

### toy data ends

CALL drop_table_if_exists('DIS2_COL');
CREATE TABLE DIS2_COL (TEST_PID INTEGER, TRAIN_PID INTEGER, TRAIN_LABEL INTEGER, COL_ID INTEGER, DIS2 DOUBLE);

INSERT INTO DIS2_COL
(SELECT TEST.PID, TRAIN.PID, TRAIN_LABEL.PLabel, TEST.COLID, 
	(TEST.COLVALUE - TRAIN.COLVALUE) * (TEST.COLVALUE - TRAIN.COLVALUE) AS DIS2
FROM TEST, TRAIN, TRAIN_LABEL
WHERE TEST.COLID = TRAIN.COLID AND TRAIN.PID = TRAIN_LABEL.PID
);


CALL drop_table_if_exists('DIS2');
CREATE TABLE DIS2 (TEST_PID INTEGER, TRAIN_PID INTEGER, TRAIN_LABEL INTEGER, DIS2 DOUBLE);

INSERT INTO DIS2
(SELECT TEST_PID, TRAIN_PID, TRAIN_LABEL, SUM(DIS2) AS DIS2
FROM DIS2_COL
GROUP BY TEST_PID, TRAIN_PID, TRAIN_LABEL
);


CALL drop_table_if_exists('KNN');
CREATE TABLE KNN (TEST_PID INTEGER, TRAIN_PID INTEGER, TRAIN_LABEL INTEGER);

INSERT INTO KNN
(SELECT TEST_PID, TRAIN_PID, TRAIN_LABEL FROM DIS2 AS A
WHERE 
	(SELECT COUNT(*) FROM DIS2 
	WHERE TEST_PID = A.TEST_PID AND DIS2 < A.DIS2) < (SELECT K FROM K)
);


CALL drop_table_if_exists('VOTE');
CREATE TABLE VOTE (TEST_PID INTEGER, TRAIN_LABEL INTEGER, NUM INTEGER);

INSERT INTO VOTE
(SELECT TEST_PID, TRAIN_LABEL, COUNT(TRAIN_PID) AS NUM
FROM KNN
GROUP BY TEST_PID, TRAIN_LABEL
);

CALL drop_table_if_exists('RESULTS');
CREATE TABLE RESULTS (TEST_PID INTEGER, PREDICTED_CLASS INTEGER);

INSERT INTO RESULTS
(SELECT TEST_PID, TRAIN_LABEL
FROM VOTE AS A
WHERE NUM = 
	(SELECT MAX(NUM) FROM VOTE
	WHERE TEST_PID = A.TEST_PID)
);


CALL drop_table_if_exists('ACCURACY')
CREATE OR REPLACE PROCEDURE get_accuracy()
LANGUAGE SQL
BEGIN
	DECLARE test_count INTEGER;
	DECLARE true_count INTEGER;
	DECLARE accuracy DECIMAL(9, 2);
	SELECT COUNT(*) INTO test_count
	FROM TEST_LABEL;
	SELECT COUNT(*) INTO true_count
	FROM TEST_LABEL, RESULTS
	WHERE TEST_LABEL.PID = RESULTS.TEST_PID AND TEST_LABEL.PLabel = RESULTS.PREDICTED_CLASS;
	SET accuracy = 1.0 * true_count / test_count;
	CREATE TABLE ACCURACY (TEST_NUMBER INTEGER, TRUE_CLASSIFIED INTEGER, ACCURACY DOUBLE);
	INSERT INTO ACCURACY VALUES
	(test_count, true_count, accuracy);
END

CALL get_accuracy();
SELECT * FROM ACCURACY;
